/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkIndexRouteImport } from './routes/work/index'
import { Route as ResumeIndexRouteImport } from './routes/resume/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as ContactIndexRouteImport } from './routes/contact/index'
import { Route as BlogsIndexRouteImport } from './routes/blogs/index'
import { Route as AboutIndexRouteImport } from './routes/about/index'
import { Route as WorkWorkRouteImport } from './routes/work/$work'
import { Route as ProjectsProjectRouteImport } from './routes/projects/$project'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkIndexRoute = WorkIndexRouteImport.update({
  id: '/work/',
  path: '/work/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResumeIndexRoute = ResumeIndexRouteImport.update({
  id: '/resume/',
  path: '/resume/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactIndexRoute = ContactIndexRouteImport.update({
  id: '/contact/',
  path: '/contact/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogsIndexRoute = BlogsIndexRouteImport.update({
  id: '/blogs/',
  path: '/blogs/',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutIndexRoute = AboutIndexRouteImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkWorkRoute = WorkWorkRouteImport.update({
  id: '/work/$work',
  path: '/work/$work',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectRoute = ProjectsProjectRouteImport.update({
  id: '/projects/$project',
  path: '/projects/$project',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/projects/$project': typeof ProjectsProjectRoute
  '/work/$work': typeof WorkWorkRoute
  '/about': typeof AboutIndexRoute
  '/blogs': typeof BlogsIndexRoute
  '/contact': typeof ContactIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/resume': typeof ResumeIndexRoute
  '/work': typeof WorkIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/projects/$project': typeof ProjectsProjectRoute
  '/work/$work': typeof WorkWorkRoute
  '/about': typeof AboutIndexRoute
  '/blogs': typeof BlogsIndexRoute
  '/contact': typeof ContactIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/resume': typeof ResumeIndexRoute
  '/work': typeof WorkIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/projects/$project': typeof ProjectsProjectRoute
  '/work/$work': typeof WorkWorkRoute
  '/about/': typeof AboutIndexRoute
  '/blogs/': typeof BlogsIndexRoute
  '/contact/': typeof ContactIndexRoute
  '/projects/': typeof ProjectsIndexRoute
  '/resume/': typeof ResumeIndexRoute
  '/work/': typeof WorkIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects/$project'
    | '/work/$work'
    | '/about'
    | '/blogs'
    | '/contact'
    | '/projects'
    | '/resume'
    | '/work'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/projects/$project'
    | '/work/$work'
    | '/about'
    | '/blogs'
    | '/contact'
    | '/projects'
    | '/resume'
    | '/work'
  id:
    | '__root__'
    | '/'
    | '/projects/$project'
    | '/work/$work'
    | '/about/'
    | '/blogs/'
    | '/contact/'
    | '/projects/'
    | '/resume/'
    | '/work/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectsProjectRoute: typeof ProjectsProjectRoute
  WorkWorkRoute: typeof WorkWorkRoute
  AboutIndexRoute: typeof AboutIndexRoute
  BlogsIndexRoute: typeof BlogsIndexRoute
  ContactIndexRoute: typeof ContactIndexRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  ResumeIndexRoute: typeof ResumeIndexRoute
  WorkIndexRoute: typeof WorkIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/work/': {
      id: '/work/'
      path: '/work'
      fullPath: '/work'
      preLoaderRoute: typeof WorkIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resume/': {
      id: '/resume/'
      path: '/resume'
      fullPath: '/resume'
      preLoaderRoute: typeof ResumeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact/': {
      id: '/contact/'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blogs/': {
      id: '/blogs/'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof BlogsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/work/$work': {
      id: '/work/$work'
      path: '/work/$work'
      fullPath: '/work/$work'
      preLoaderRoute: typeof WorkWorkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$project': {
      id: '/projects/$project'
      path: '/projects/$project'
      fullPath: '/projects/$project'
      preLoaderRoute: typeof ProjectsProjectRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectsProjectRoute: ProjectsProjectRoute,
  WorkWorkRoute: WorkWorkRoute,
  AboutIndexRoute: AboutIndexRoute,
  BlogsIndexRoute: BlogsIndexRoute,
  ContactIndexRoute: ContactIndexRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  ResumeIndexRoute: ResumeIndexRoute,
  WorkIndexRoute: WorkIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
